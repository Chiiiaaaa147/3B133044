import math
cities = {
    'A': {'coord': (0, 0), 'cost': 2000},
    'B': {'coord': (0, 120), 'cost': 2400},
    'C': {'coord': (30, 100), 'cost': 2400},
    'D': {'coord': (80, 0), 'cost': 1600},
    'E': {'coord': (45, 10), 'cost': 1500},
    'F': {'coord': (90, 160), 'cost': 2200},
    'G': {'coord': (120, 200), 'cost': 1200}
# 計算兩個城市之間的距離
def calculate_distance(city1, city2):
    x1, y1 = cities[city1]['coord']
    x2, y2 = cities[city2]['coord']
    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)
# 初始化表格
num_cities = len(cities)
num_states = 2 ** num_cities
dp = [[float('inf')] * num_states for _ in range(num_cities)]
# 設置起始點的狀態
start_city = 'A'
start_state = 1 << 0
dp[0][start_state] = 0
# 填充表格
for state in range(num_states):
    for current_city in range(num_cities):
        if (state >> current_city) & 1:
            for next_city in range(num_cities):
                if not (state >> next_city) & 1:
                    next_state = state | (1 << next_city)
                    distance = calculate_distance(chr(current_city + ord('A')), chr(next_city + ord('A')))
                    discount = 0.8 if next_city == 2 * current_city + 1 else 1.0
                    cost = dp[current_city][state] + distance * 100 + cities[chr(next_city + ord('A'))]['cost'] * discount
                    dp[next_city][next_state] = min(dp[next_city][next_state], cost)
# 找到最小花費的行程
final_state = (1 << num_cities) - 1
min_cost = min(dp[i][final_state] for i in range(num_cities))
print("最小花費：", min_cost)

# 回溯找到最便宜的旅遊方案
current_city = dp.index(min_cost)
tour = [chr(current_city + ord('A'))]
current_state = final_state
while current_state != start_state:
    for prev_city in range(num_cities):
        prev_state = current_state & ~(1 << current_city)
        if dp[current_city][current_state] == dp[prev_city][prev_state] + calculate_distance(chr(prev_city + ord('A')), chr(current_city + ord('A'))) * 100 + cities[chr(current_city + ord('A'))]['cost']:
            tour.append(chr(prev_city + ord('A')))
            current_city = prev_city
            current_state = prev_state
            break
tour.reverse()
print("旅遊行程：", ' -> '.join(tour))# 計算最便宜的旅遊行程
distances, path = find_cheapest_path(distances, 0)
# 列印最便宜的旅遊行程
path_cities = ["A", "B", "C", "D", "E", "F", "G"]
current_city = 6
cheapest_path = [path_cities[current_city]]
while current_city != 0:
    current_city = path[current_city]
    print("最便宜的旅遊行程是：" + " -> ".join(cheapest_path))
print("總共花費的旅費為：" + str(distances[6] * 100))  # 油錢以每公里100元計算
最便宜的旅遊行程是：A -> G -> E -> B -> D -> C -> F
總共花費的旅費為：892500
